% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/encGeo.R
\name{encGeo}
\alias{encGeo}
\title{Generate Geo2vec encodings.}
\usage{
encGeo(
  input,
  txdb,
  exon_only = TRUE,
  long_tx = TRUE,
  mRNA = TRUE,
  ngrid = 40,
  window = 0,
  type = "chunkTX",
  unify_strand = TRUE
)
}
\arguments{
\item{input}{A \code{GRanges} object contains genomic coordinates.}

\item{txdb}{A transcript database, currently only TxDb and EnsDb are supported.}

\item{exon_only}{A \code{logical} object indicating whether to consider only sites from exonic regions.}

\item{long_tx}{A \code{logical} object indicating whether to consider only the longest transcript for each site.}

\item{mRNA}{A \code{character} object indicating whether to consider only protein coding transcripts.}

\item{ngrid}{An integer indicating the number of grids, i.e., how many pieces will the transcript be divided into.}

\item{window}{An integer indicates the width of flanking region which equals to 2*window + input width.}

\item{type}{An \code{character} indicating the type of Geo2vec, should be one of the chunkTX, gridTX, landmarkTX, onehotTX.}

\item{unify_strand}{A \code{logical} object indicating whether to unify the direction from 5'end to 3'end for gridTX. For chunkTX and gridTX, unify_strand is inside the resize function.}
}
\value{
A \code{\link{GRanges}} object whose metacolumns are the generated Geo2vec encodings.
}
\description{
This function accepts GRanges data and generate Geo2vec encodings for each input.
}
\examples{

library(EnsDb.Hsapiens.v86)
input <- import.bed(system.file("extdata", "example.bed", package = "Geo2vec"))

## Generate chunkTX for example data.
encoding <- encGeo(input, EnsDb.Hsapiens.v86, type='chunkTX', exon_only=T, long_tx=T, mRNA=T)

## Generate gridTX for example data.
encoding <- encGeo(input, EnsDb.Hsapiens.v86, type='gridTX', ngrid=40, exon_only=T, long_tx=T, mRNA=T)

## Generate landmarkTX for example data.
encoding <- encGeo(input, EnsDb.Hsapiens.v86, type='landmarkTX', long_tx=T, mRNA=T)

## Generate onehotTX for example data.
encoding <- encGeo(input, EnsDb.Hsapiens.v86, type='onehotTX', window=250, exon_only=T, long_tx=T, mRNA=T)

}
